#ifndef DEVICE_H
#define DEVICE_H

enum inputflags {
	INPUT_HAS_GAIN = 1 << 0,
	INPUT_HAS_AUTOSET = 1 << 1,
	INPUT_HAS_REFLEVEL = 1 << 2,
	INPUT_HAS_48V = 1 << 3,
	INPUT_HAS_HIZ = 1 << 4,
};

struct inputinfo {
	char name[12];
	int flags;
	struct {
		short min;
		short max;
	} gain;
	struct {
		const char *const*names;
		size_t nameslen;
	} reflevel;
};

enum outputflags {
	OUTPUT_HAS_REFLEVEL = 1 << 0,
};

struct outputinfo {
	char name[12];
	int flags;
	struct {
		const char *const*names;
		size_t nameslen;
	} reflevel;
};

enum deviceflags {
	DEVICE_HAS_DUREC = 1 << 0,
	DEVICE_HAS_ROOMEQ = 1 << 1,
};

enum control {
	UNKNOWN,
	INPUT_MUTE,
	INPUT_FXSEND,
	INPUT_STEREO,
	INPUT_RECORD,
	INPUT_PLAYCHAN,
	INPUT_MSPROC,
	INPUT_PHASE,
	INPUT_GAIN,
	INPUT_REFLEVEL,
	INPUT_48V,
	INPUT_AUTOSET,
	INPUT_HIZ,
	OUTPUT_VOLUME,
	OUTPUT_PAN,
	OUTPUT_MUTE,
	OUTPUT_FXRETURN,
	OUTPUT_STEREO,
	OUTPUT_RECORD,
	OUTPUT_PLAYCHAN,
	OUTPUT_PHASE,
	OUTPUT_REFLEVEL,
	OUTPUT_CROSSFEED,
	OUTPUT_VOLUMECAL,
	LOWCUT,
	LOWCUT_FREQ,
	LOWCUT_SLOPE,
	EQ,
	EQ_BAND1TYPE,
	EQ_BAND1GAIN,
	EQ_BAND1FREQ,
	EQ_BAND1Q,
	EQ_BAND2GAIN,
	EQ_BAND2FREQ,
	EQ_BAND2Q,
	EQ_BAND3TYPE,
	EQ_BAND3GAIN,
	EQ_BAND3FREQ,
	EQ_BAND3Q,
	DYNAMICS,
	DYNAMICS_GAIN,
	DYNAMICS_ATTACK,
	DYNAMICS_RELEASE,
	DYNAMICS_COMPTHRES,
	DYNAMICS_COMPRATIO,
	DYNAMICS_EXPTHRES,
	DYNAMICS_EXPRATIO,
	DYNAMICS_METER,
	AUTOLEVEL,
	AUTOLEVEL_MAXGAIN,
	AUTOLEVEL_HEADROOM,
	AUTOLEVEL_RISETIME,
	AUTOLEVEL_METER,
	ROOMEQ,
	ROOMEQ_DELAY,
	ROOMEQ_BAND1TYPE,
	ROOMEQ_BAND1GAIN,
	ROOMEQ_BAND1FREQ,
	ROOMEQ_BAND1Q,
	ROOMEQ_BAND2GAIN,
	ROOMEQ_BAND2FREQ,
	ROOMEQ_BAND2Q,
	ROOMEQ_BAND3GAIN,
	ROOMEQ_BAND3FREQ,
	ROOMEQ_BAND3Q,
	ROOMEQ_BAND4GAIN,
	ROOMEQ_BAND4FREQ,
	ROOMEQ_BAND4Q,
	ROOMEQ_BAND5GAIN,
	ROOMEQ_BAND5FREQ,
	ROOMEQ_BAND5Q,
	ROOMEQ_BAND6GAIN,
	ROOMEQ_BAND6FREQ,
	ROOMEQ_BAND6Q,
	ROOMEQ_BAND7GAIN,
	ROOMEQ_BAND7FREQ,
	ROOMEQ_BAND7Q,
	ROOMEQ_BAND8TYPE,
	ROOMEQ_BAND8GAIN,
	ROOMEQ_BAND8FREQ,
	ROOMEQ_BAND8Q,
	ROOMEQ_BAND9TYPE,
	ROOMEQ_BAND9GAIN,
	ROOMEQ_BAND9FREQ,
	ROOMEQ_BAND9Q,
	NAME,
	MIX,
	MIX_LEVEL,
	REVERB,
	REVERB_TYPE,
	REVERB_PREDELAY,
	REVERB_LOWCUT,
	REVERB_ROOMSCALE,
	REVERB_ATTACK,
	REVERB_HOLD,
	REVERB_RELEASE,
	REVERB_HIGHCUT,
	REVERB_TIME,
	REVERB_HIGHDAMP,
	REVERB_SMOOTH,
	REVERB_VOLUME,
	REVERB_WIDTH,
	ECHO,
	ECHO_TYPE,
	ECHO_DELAY,
	ECHO_FEEDBACK,
	ECHO_HIGHCUT,
	ECHO_VOLUME,
	ECHO_WIDTH,
	CTLROOM_MAINOUT,
	CTLROOM_MAINMONO,
	CTLROOM_MUTEENABLE,
	CTLROOM_DIMREDUCTION,
	CTLROOM_DIM,
	CTLROOM_RECALLVOLUME,
	CLOCK_SOURCE,
	CLOCK_SAMPLERATE,
	CLOCK_WCKOUT,
	CLOCK_WCKSINGLE,
	CLOCK_WCKTERM,
	HARDWARE_OPTICALOUT,
	HARDWARE_SPDIFOUT,
	HARDWARE_CCMODE,
	HARDWARE_CCMIX,
	HARDWARE_STANDALONEMIDI,
	HARDWARE_STANDALONEARC,
	HARDWARE_LOCKKEYS,
	HARDWARE_REMAPKEYS,
	HARDWARE_DSPVERLOAD,
	HARDWARE_DSPAVAIL,
	HARDWARE_DSPSTATUS,
	HARDWARE_ARCDELTA,
	DUREC_STATUS,
	DUREC_TIME,
	DUREC_USBLOAD,
	DUREC_TOTALSPACE,
	DUREC_FREESPACE,
	DUREC_NUMFILES,
	DUREC_FILE,
	DUREC_NEXT,
	DUREC_RECORDTIME,
	DUREC_INDEX,
	DUREC_NAME0,
	DUREC_NAME1,
	DUREC_NAME2,
	DUREC_NAME3,
	DUREC_INFO,
	DUREC_LENGTH,
	DUREC_CONTROL,
	DUREC_DELETE,
	DUREC_SEEK,
	DUREC_PLAYMODE,
	REFRESH,

	NUMCTLS
};

struct param {
	int in;
	int out;
};

struct device {
	const char *id;
	const char *name;
	int version;
	int flags;

	const struct inputinfo *inputs;
	int inputslen;
	const struct outputinfo *outputs;
	int outputslen;

	int refresh;

	int (*ctltoreg)(enum control ctl, const struct param *p);
	enum control (*regtoctl)(int reg, struct param *p);
};

#endif
